Проект 2: Игра с карти - четни номера

Целта на проектa ви е да реализирате походова игра с карти.
 Играта се играе от двама играчи, всеки от които притежава 
предварително зададено тесте. В тестето участват до 10 карти. 
Всяка карта притежава четири свойства - Атака, Живот, Необходима 
енергия, Умения (от 1 до 3 на брой). Победител се излъчва когато 
единия играч остане без карти. За изваждането на карта на 
"бойното поле" е необходима енергия. Играчите започват с опередена 
енергия и след всеки ход получават допълнителна такава.

Домашно 1. Първата ви задача около този проект е да създадете 
клас карта. Той трябва да притежава горепосочените свойства 
като на този етап ще игнорираме уменията. Необходимата енергия 
се пресмята по формулата Е = Ж/100 + А/20 (Е - необходима енергия, 
Ж - живот, А - атака). Класът трябва да притежава конструктор, 
копиращ конструктор и деструктор. Останалите методи и член-данни 
трябва да бъдат избрани от вас. Демонстрирайте използването на този 
клас в кратка main функция.

Домашно 2. Имплементирайте нов клас Deck (тесте), които да съдържа 
масив от карти (произволен брой). За да кажем че тестето е валидно 
то трябва да съдържа поне 5 карти. Класа Deck трябва да има методи 
които му позволяват да се записва/инициализира във/от файл (бинарен), 
ако тестето е валидно. Освен това трябва да поддържате добавяне на 
нова, изтриване или промяна на съществуваща карта от тестето 
(респективно от файла). Същото така трябва да имате функция, която 
да записва 5-те най-добри карти по даден критерии в текстов файл 
(критерият ще се получава като аргумент на функцията). Ако е нужно 
допълнете класа карта с нови параметри и функции. Документирайте 
кода по подходящ начин (коментари + описания).

Домашно 3. За класа Card предефинирайте следните оператори:
operator= - присвояване на карата
operator== - проверява дали 2 карти имат еднакви параметри
operator!= - проверява дали поне едно поле на 2 карти е различно
operator<< - оператор за изход в поток
operator>> - оператор за вход от поток
operator+= - Приема десен аргумент число и увеличава текущата кръв на карата с него (кръвта не може да надминава максималната)
operator-= - Приема десен аргумент число и намалява текущата кръв на карата с него (кръвта не може да е отрицателно число)

За класа Deck предефинирайте следните оператори:
operator= - пристояване на дек
operator== - проверява дали два дека имат еднакви карти (без значение подредбата)
operator!= - проверява дали в два дека има поне 1 различна карата или различен брой карти
оperator < > <= >= - сравнява сборът от атака и живота на картите в двата дека
operator<< - оператор за изход в поток
оператор+ - приема карта и дек и връша дек с картите от дека и новата карта(независимо дали отляво седи картата или дека)
оператор+ - приема два дека и връща нов дек с картите от двата
operator+= - приема десен аргумент карта и я прибавя в дека
operator+= - приема десен аргумент дек и прибавя всички карти от него в дека от ляво
opertaor[] - приема аргумент цяло число n и въща указател към n-тата карта в дека

За класа Deck предефинирайте поне още четири оператора по ваше усмотрение.

Домашно 4:
Съставете подходяща йерархия от наследяване на следните класове:
BattleField - клас който представя поле което съдържа изиграните карти на двамата играчи. 
Картите се слагат на полето винаги в най-лявата свободна позиция. На полето всеки играч 
може да има неограничено количество карти. Ако някоя карта умре трябва всички карти от 
дясната й страна да се преместят с една позиция на ляво (в масива не трябва да има дупки). 
Умрялата карта отива в общ масив наречен гробище където се съхраняват всички умрели 
карти до момента.
Класа BattleField трябва да може да бъде сериализиран в масив от байтове, който не трябва 
да съдържа байт избран при конструирането на BattleField-a.
BattleField-a трябва да може да бъде конструиран чрез сериализирания байт масив като 
възстанови всички карти и тестета които са били в него преди сериализацията. Десериализацията 
трябва да става без нужда от знанието на игнорираният байт. 
Байт (byte) > буква
Трябва да може да се сериализират произволно големи полета
Имплементирайте клас Skill който представлява умение на карта. Всяко умение може да въздейства 
на една или повече карти (свои или противникови) които се намират на полето или в гробището. 
Класа Skill трябва да има метод, който приема като аргумент бойното поле, списък с позиците на 
картите върху който ще въздейства (както и други методи който усигуряват нормалното му функциониране).
Имплементирайте поне 2 класа, който наследяват Skill И въздействат на собствени карти. Като умението 
на поне един от класовете действа на повече от 1 карта.
Имплементирайте поне 2 класа, който наследяват Skill и въздействат на вражеските картиКато 
умението на поне един от класовете действа на повече от 1 карта.
Имплементирайте клас, който извиква от гробището, призовават, или забраняват на карта да се завърне 
от гробището.
Имплементирайте 2 класа, който се случват с някаква вероятност.
Имплементирайте 2 класа, който въздейстават на поне 3 карти (противникови или собствени, като вие 
решете какво ще стане ако няма достатъчен брой карти на полето).

Атрибутите и въздействието на всички класове са по ваше усмотрение. Документирайте добре как точно 
се очаква, да се държат вашите умения, за да не стават недоразумения.